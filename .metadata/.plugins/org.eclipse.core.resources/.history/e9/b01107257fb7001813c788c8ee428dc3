package a1;

import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;

import javax.imageio.ImageIO;

public class Image {
	private BufferedImage image;
	private int[] grayScaleValues;
	private int[] computedGrayScales;
	private int width;
	private int height;
	private int operatorSize = 9;

	public Image(String fileLocation) {
		try {
			image = ImageIO.read(new File(fileLocation));
			width = image.getWidth();
			height = image.getHeight();
			grayScaleValues = new int[height * width];
			computedGrayScales = new int[height * width];
			
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	public BufferedImage getImage() {
		return image;
	}
	
	public void convoluteImage(float[] operator) {
		storeGrayValues();
		int[] temp = new int[operatorSize];
		for (int y = 0; y < height; y++) {
			for (int x = 0; x < width; x++) {
				int position = y * width + x;
				int centerValue = grayScaleValues[position];
				if (x == 0 && y == height - 1) {
					temp[0] = centerValue;
					temp[1] = grayScaleValues[(y - 1) * width + x];
					temp[2] = grayScaleValues[(y - 1) * width + x + 1];
					temp[3] = centerValue;
					temp[4] = centerValue;
					temp[5] = grayScaleValues[position + 1];
					
				} else if (x == width - 1 && y == 0) {
					
				} else if (x == 0 && y == 0) {
					temp[0] = centerValue;
					temp[1] = centerValue;
					temp[2] = centerValue;
					temp[3] = centerValue;
					temp[4] = centerValue;
					temp[5] = grayScaleValues[position + 1];
					temp[6] = centerValue;
					temp[7] = grayScaleValues[(y + 1) * width + x];
					temp[8] = grayScaleValues[(y + 1) * width + x + 1];
				} else if (x == 0) {
				
				} else if (y == height - 1) {
					
				} else if (x == width - 1) {
					
				} else if (y == 0) {
					
				} else {
					
				}
			}
		}
	}

	private void storeGrayValues() {
		for (int y = 0; y < height; y++) {
			for (int x = 0; x < width; x++) {
			    int p = image.getRGB(x,y);
			    int r = (p>>16)&0xff;
			    int g = (p>>8)&0xff;
			    int b = p&0xff;
			    int grayScaleValue = (r + g + b) / 3;
			    grayScaleValues[y * width + x] = grayScaleValue;
		
			}
	    }
	}
}
